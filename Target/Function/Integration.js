var l=(...[a={}])=>{Object.entries(a).forEach(([t,i])=>Object.defineProperty(a,t,{value:i===!0?n[t]:a[t]}));const{Path:r,Cache:c,Logger:p,Exclude:m,Action:u,Biome:f}=s(n,a),o=new Set;return typeof r<"u"&&(Array.isArray(r)||r instanceof Set)&&r.forEach(t=>o.add(t)),{name:"@playform/format",hooks:{"astro:build:done":async({dir:t})=>{o.size===0&&o.add(t);const i=await(await import("@biomejs/js-api")).Biome.create({distribution:(await import("@biomejs/js-api")).Distribution.NODE});f&&typeof f=="object"&&i.applyConfiguration(f);const y=s(u,{Wrote:async e=>{try{return i.formatContent(e.Buffer.toString(),{filePath:(await import("node:path")).resolve(e.Input)}).content}catch{return e.Buffer}}});for(const e of o)await(await(await(await new(await import("@playform/pipe")).default(c,p).In(e)).By("**/*.{js,mjs,cjs,ts,json}")).Not(m)).Pipe(y)}}}};const{default:n}=await import("../Variable/Option.js"),{default:s}=await import("./Merge.js");export{n as Default,s as Merge,l as default};
