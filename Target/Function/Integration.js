var d=(...[a={}])=>{Object.entries(a).forEach(([t,n])=>Object.defineProperty(a,t,{value:n===!0?f[t]:a[t]}));const{Path:o,Cache:c,Logger:p,Exclude:m,Action:l,Biome:r}=s(f,a),i=new Set;return typeof o<"u"&&(Array.isArray(o)||o instanceof Set)&&o.forEach(t=>i.add(t)),{name:"@playform/format",hooks:{"astro:build:done":async({dir:t})=>{i.size===0&&i.add(t);const n=await(await import("@biomejs/js-api")).Biome.create({distribution:(await import("@biomejs/js-api")).Distribution.NODE});console.log(r);try{r&&typeof r=="object"&&n.applyConfiguration(r)}catch(e){console.log(e)}const u=s(l,{Wrote:async e=>{try{return n.formatContent(e.Buffer.toString(),{filePath:(await import("node:path")).resolve(e.Input)}).content}catch(y){return console.log(y),e.Buffer}}});for(const e of i)await(await(await(await new(await import("@playform/pipe")).default(c,p).In(e)).By("**/*.{js,mjs,cjs,ts,json}")).Not(m)).Pipe(u)}}}};const{default:f}=await import("../Variable/Option.js"),{default:s}=await import("./Merge.js");export{f as Default,s as Merge,d as default};
