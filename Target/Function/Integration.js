var l=(...[a={}])=>{Object.entries(a).forEach(([t,i])=>Object.defineProperty(a,t,{value:i===!0?f[t]:a[t]}));const{Path:r,Cache:s,Logger:c,Exclude:p,Action:m,Biome:y}=n(f,a),o=new Set;return typeof r<"u"&&(Array.isArray(r)||r instanceof Set)&&r.forEach(t=>o.add(t)),{name:"@playform/format",hooks:{"astro:build:done":async({dir:t})=>{o.size===0&&o.add(t);const i=await(await import("@biomejs/js-api")).Biome.create({distribution:(await import("@biomejs/js-api")).Distribution.NODE}),u=n(m,{Wrote:async e=>{try{return i.formatContent(e.Buffer.toString(),{filePath:(await import("path")).resolve(e.Input)}).content}catch{return e.Buffer}}});for(const e of o)await(await(await(await new(await import("@playform/pipe")).default(s,c).In(e)).By("**/*.{js,mjs,cjs,ts,json}")).Not(p)).Pipe(u)}}}};const{default:f}=await import("../Variable/Option.js"),{default:n}=await import("@playform/build/Target/Function/Merge.js");export{f as Default,n as Merge,l as default};
