var h=(...[r={}])=>{Object.entries(r).forEach(([t,i])=>Object.defineProperty(r,t,{value:i===!0?f[t]:r[t]}));const{Path:e,Cache:c,Logger:p,Exclude:m,Action:y,Biome:n}=s(f,r),o=new Set;return typeof e<"u"&&((Array.isArray(e)||e instanceof Set)&&e.forEach(t=>o.add(t)),e instanceof Map&&o.add(e)),{name:"@playform/format",hooks:{"astro:build:done":async({dir:t})=>{o.size===0&&o.add(t);const i=await(await import("@biomejs/js-api")).Biome.create({distribution:(await import("@biomejs/js-api")).Distribution.NODE});try{n&&typeof n=="object"&&i.applyConfiguration(n)}catch(a){console.log(a)}const l=s(y,{Wrote:async({Buffer:a,Output:d})=>{try{return i.formatContent(a.toString(),{filePath:(await import("path")).resolve(d)}).content}catch(u){return console.log(u),a}}});for(const a of o)await(await(await(await new(await import("@playform/pipe")).default(c,p).In(a)).By("**/*.{js,mjs,cjs,ts,json}")).Not(m)).Pipe(l)}}}};const{default:f}=await import("../Variable/Option.js"),{default:s}=await import("./Merge.js");export{f as Default,s as Merge,h as default};
