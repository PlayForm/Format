var l=(...[r={}])=>{Object.entries(r).forEach(([t,a])=>Object.defineProperty(r,t,{value:a===!0?n[t]:r[t]}));const{Path:o,Cache:c,Logger:p,Exclude:m,Action:u,Biome:f}=s(n,r),i=new Set;return typeof o<"u"&&(Array.isArray(o)||o instanceof Set)&&o.forEach(t=>i.add(t)),{name:"@playform/format",hooks:{"astro:build:done":async({dir:t})=>{i.size||i.add(t);const a=await(await import("@biomejs/js-api")).Biome.create({distribution:(await import("@biomejs/js-api")).Distribution.NODE}),y=s(u,{Wrote:async e=>{try{return a.formatContent(e.Buffer.toString(),{filePath:(await import("path")).resolve(e.Input)}).content}catch{return e.Buffer}}});try{typeof f=="object"&&a&&(f.$schema=void 0,a.applyConfiguration(f))}catch(e){console.log(e)}for(const e of i)await(await(await(await new(await import("@playform/pipe")).default(c,p).In(e)).By("**/*.{js,mjs,cjs,ts,json}")).Not(m)).Pipe(y)}}}};const{default:n}=await import("../Variable/Option.js"),{default:s}=await import("@playform/build/Target/Function/Merge.js");export{n as Default,s as Merge,l as default};
