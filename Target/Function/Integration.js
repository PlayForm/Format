var h=(...[a={}])=>{Object.entries(a).forEach(([t,i])=>Object.defineProperty(a,t,{value:i===!0?f[t]:a[t]}));const{Path:o,Cache:c,Logger:p,Exclude:m,Action:y,Biome:n}=s(f,a),r=new Set;return typeof o<"u"&&(Array.isArray(o)||o instanceof Set)&&o.forEach(t=>r.add(t)),{name:"@playform/format",hooks:{"astro:build:done":async({dir:t})=>{r.size===0&&r.add(t);const i=await(await import("@biomejs/js-api")).Biome.create({distribution:(await import("@biomejs/js-api")).Distribution.NODE});try{n&&typeof n=="object"&&i.applyConfiguration(n)}catch(e){console.log(e)}const l=s(y,{Wrote:async({Buffer:e,Output:d})=>{try{return i.formatContent(e.toString(),{filePath:(await import("node:path")).resolve(d)}).content}catch(u){return console.log(u),e}}});for(const e of r)await(await(await(await new(await import("@playform/pipe")).default(c,p).In(e)).By("**/*.{js,mjs,cjs,ts,json}")).Not(m)).Pipe(l)}}}};const{default:f}=await import("../Variable/Option.js"),{default:s}=await import("./Merge.js");export{f as Default,s as Merge,h as default};
