var h=(...[o={}])=>{Object.entries(o).forEach(([e,a])=>Object.defineProperty(o,e,{value:a===!0?f[e]:o[e]}));const{Path:r,Cache:l,Logger:m,Exclude:y,Action:d,Biome:n}=p(f,o),i=new Set;return typeof r<"u"&&(Array.isArray(r)||r instanceof Set)&&r.forEach(e=>i.add(e)),{name:"@playform/format",hooks:{"astro:build:done":async({dir:e})=>{i.size===0&&i.add(e);const a=await(await import("@biomejs/js-api")).Biome.create({distribution:(await import("@biomejs/js-api")).Distribution.NODE});try{n&&typeof n=="object"&&a.applyConfiguration(n)}catch(t){console.log(t)}const u=p(d,{Wrote:async({Buffer:t,Input:s})=>{try{return a.formatContent(t.toString(),{filePath:(await import("node:path")).resolve(s)}).content}catch{return t}},Passed:async({Buffer:t,Input:s})=>{try{console.log(a.lintContent(t.toString(),{filePath:(await import("node:path")).resolve(s)}).diagnostics)}catch(c){console.log(c)}return!0}});for(const t of i)await(await(await(await new(await import("@playform/pipe")).default(l,m).In(t)).By("**/*.{js,mjs,cjs,ts,json}")).Not(y)).Pipe(u)}}}};const{default:f}=await import("../Variable/Option.js"),{default:p}=await import("./Merge.js");export{f as Default,p as Merge,h as default};
